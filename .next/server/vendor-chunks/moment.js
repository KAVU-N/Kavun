/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/moment";
exports.ids = ["vendor-chunks/moment"];
exports.modules = {

/***/ "(ssr)/./node_modules/moment/locale/tr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("//! moment.js locale configuration\n//! locale : Turkish [tr]\n//! authors : Erhan Gundogan : https://github.com/erhangundogan,\n//!           Burak Yiğit Kaya: https://github.com/BYK\n;\n(function(global, factory) {\n     true ? factory(__webpack_require__(/*! ../moment */ \"(ssr)/./node_modules/moment/moment.js\")) : 0;\n})(this, function(moment) {\n    \"use strict\";\n    //! moment.js locale configuration\n    var suffixes = {\n        1: \"'inci\",\n        5: \"'inci\",\n        8: \"'inci\",\n        70: \"'inci\",\n        80: \"'inci\",\n        2: \"'nci\",\n        7: \"'nci\",\n        20: \"'nci\",\n        50: \"'nci\",\n        3: \"'\\xfcnc\\xfc\",\n        4: \"'\\xfcnc\\xfc\",\n        100: \"'\\xfcnc\\xfc\",\n        6: \"'ncı\",\n        9: \"'uncu\",\n        10: \"'uncu\",\n        30: \"'uncu\",\n        60: \"'ıncı\",\n        90: \"'ıncı\"\n    };\n    var tr = moment.defineLocale(\"tr\", {\n        months: \"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eyl\\xfcl_Ekim_Kasım_Aralık\".split(\"_\"),\n        monthsShort: \"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara\".split(\"_\"),\n        weekdays: \"Pazar_Pazartesi_Salı_\\xc7arşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),\n        weekdaysShort: \"Paz_Pzt_Sal_\\xc7ar_Per_Cum_Cmt\".split(\"_\"),\n        weekdaysMin: \"Pz_Pt_Sa_\\xc7a_Pe_Cu_Ct\".split(\"_\"),\n        meridiem: function(hours, minutes, isLower) {\n            if (hours < 12) {\n                return isLower ? \"\\xf6\\xf6\" : \"\\xd6\\xd6\";\n            } else {\n                return isLower ? \"\\xf6s\" : \"\\xd6S\";\n            }\n        },\n        meridiemParse: /öö|ÖÖ|ös|ÖS/,\n        isPM: function(input) {\n            return input === \"\\xf6s\" || input === \"\\xd6S\";\n        },\n        longDateFormat: {\n            LT: \"HH:mm\",\n            LTS: \"HH:mm:ss\",\n            L: \"DD.MM.YYYY\",\n            LL: \"D MMMM YYYY\",\n            LLL: \"D MMMM YYYY HH:mm\",\n            LLLL: \"dddd, D MMMM YYYY HH:mm\"\n        },\n        calendar: {\n            sameDay: \"[bug\\xfcn saat] LT\",\n            nextDay: \"[yarın saat] LT\",\n            nextWeek: \"[gelecek] dddd [saat] LT\",\n            lastDay: \"[d\\xfcn] LT\",\n            lastWeek: \"[ge\\xe7en] dddd [saat] LT\",\n            sameElse: \"L\"\n        },\n        relativeTime: {\n            future: \"%s sonra\",\n            past: \"%s \\xf6nce\",\n            s: \"birka\\xe7 saniye\",\n            ss: \"%d saniye\",\n            m: \"bir dakika\",\n            mm: \"%d dakika\",\n            h: \"bir saat\",\n            hh: \"%d saat\",\n            d: \"bir g\\xfcn\",\n            dd: \"%d g\\xfcn\",\n            w: \"bir hafta\",\n            ww: \"%d hafta\",\n            M: \"bir ay\",\n            MM: \"%d ay\",\n            y: \"bir yıl\",\n            yy: \"%d yıl\"\n        },\n        ordinal: function(number, period) {\n            switch(period){\n                case \"d\":\n                case \"D\":\n                case \"Do\":\n                case \"DD\":\n                    return number;\n                default:\n                    if (number === 0) {\n                        // special case for zero\n                        return number + \"'ıncı\";\n                    }\n                    var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;\n                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);\n            }\n        },\n        week: {\n            dow: 1,\n            doy: 7\n        }\n    });\n    return tr;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/moment/locale/tr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n//! moment.js\n//! version : 2.30.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    \"use strict\";\n    var hookCallback;\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === \"[object Array]\";\n    }\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === \"[object Object]\";\n    }\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for(k in obj){\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    function isUndefined(input) {\n        return input === void 0;\n    }\n    function isNumber(input) {\n        return typeof input === \"number\" || Object.prototype.toString.call(input) === \"[object Number]\";\n    }\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === \"[object Date]\";\n    }\n    function map(arr, fn) {\n        var res = [], i, arrLen = arr.length;\n        for(i = 0; i < arrLen; ++i){\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n    function extend(a, b) {\n        for(var i in b){\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n        if (hasOwnProp(b, \"toString\")) {\n            a.toString = b.toString;\n        }\n        if (hasOwnProp(b, \"valueOf\")) {\n            a.valueOf = b.valueOf;\n        }\n        return a;\n    }\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false\n        };\n    }\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function(fun) {\n            var t = Object(this), len = t.length >>> 0, i;\n            for(i = 0; i < len; i++){\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n    function isValid(m) {\n        var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());\n        if (isNowValid) {\n            flags = getParsingFlags(m);\n            parsedParts = some.call(flags.parsedDateParts, function(i) {\n                return i != null;\n            });\n            isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);\n            if (m._strict) {\n                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;\n            }\n        }\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {\n            m._isValid = isNowValid;\n        } else {\n            return isNowValid;\n        }\n        return m._isValid;\n    }\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n        return m;\n    }\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [], updateInProgress = false;\n    function copyConfig(to, from) {\n        var i, prop, val, momentPropertiesLen = momentProperties.length;\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n        if (momentPropertiesLen > 0) {\n            for(i = 0; i < momentPropertiesLen; i++){\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n        return to;\n    }\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n    function isMoment(obj) {\n        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;\n    }\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false && typeof console !== \"undefined\" && console.warn) {\n            console.warn(\"Deprecation warning: \" + msg);\n        }\n    }\n    function deprecate(msg, fn) {\n        var firstTime = true;\n        return extend(function() {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [], arg, i, key, argLen = arguments.length;\n                for(i = 0; i < argLen; i++){\n                    arg = \"\";\n                    if (typeof arguments[i] === \"object\") {\n                        arg += \"\\n[\" + i + \"] \";\n                        for(key in arguments[0]){\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + \": \" + arguments[0][key] + \", \";\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + \"\\nArguments: \" + Array.prototype.slice.call(args).join(\"\") + \"\\n\" + new Error().stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n    var deprecations = {};\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n    function isFunction(input) {\n        return typeof Function !== \"undefined\" && input instanceof Function || Object.prototype.toString.call(input) === \"[object Function]\";\n    }\n    function set(config) {\n        var prop, i;\n        for(i in config){\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this[\"_\" + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + \"|\" + /\\d{1,2}/.source);\n    }\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for(prop in childConfig){\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for(prop in parentConfig){\n            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n    var keys;\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function(obj) {\n            var i, res = [];\n            for(i in obj){\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n    var defaultCalendar = {\n        sameDay: \"[Today at] LT\",\n        nextDay: \"[Tomorrow at] LT\",\n        nextWeek: \"dddd [at] LT\",\n        lastDay: \"[Yesterday at] LT\",\n        lastWeek: \"[Last] dddd [at] LT\",\n        sameElse: \"L\"\n    };\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar[\"sameElse\"];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = \"\" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;\n        return (sign ? forceSign ? \"+\" : \"\" : \"-\") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === \"string\") {\n            func = function() {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function() {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function() {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n        for(i = 0, length = array.length; i < length; i++){\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n        return function(mom) {\n            var output = \"\", i;\n            for(i = 0; i < length; i++){\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n        return formatFunctions[format](m);\n    }\n    function expandFormat(format, locale) {\n        var i = 5;\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n        localFormattingTokens.lastIndex = 0;\n        while(i >= 0 && localFormattingTokens.test(format)){\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n        return format;\n    }\n    var defaultLongDateFormat = {\n        LTS: \"h:mm:ss A\",\n        LT: \"h:mm A\",\n        L: \"MM/DD/YYYY\",\n        LL: \"MMMM D, YYYY\",\n        LLL: \"MMMM D, YYYY h:mm A\",\n        LLLL: \"dddd, MMMM D, YYYY h:mm A\"\n    };\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];\n        if (format || !formatUpper) {\n            return format;\n        }\n        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {\n            if (tok === \"MMMM\" || tok === \"MM\" || tok === \"DD\" || tok === \"dddd\") {\n                return tok.slice(1);\n            }\n            return tok;\n        }).join(\"\");\n        return this._longDateFormat[key];\n    }\n    var defaultInvalidDate = \"Invalid date\";\n    function invalidDate() {\n        return this._invalidDate;\n    }\n    var defaultOrdinal = \"%d\", defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n    function ordinal(number) {\n        return this._ordinal.replace(\"%d\", number);\n    }\n    var defaultRelativeTime = {\n        future: \"in %s\",\n        past: \"%s ago\",\n        s: \"a few seconds\",\n        ss: \"%d seconds\",\n        m: \"a minute\",\n        mm: \"%d minutes\",\n        h: \"an hour\",\n        hh: \"%d hours\",\n        d: \"a day\",\n        dd: \"%d days\",\n        w: \"a week\",\n        ww: \"%d weeks\",\n        M: \"a month\",\n        MM: \"%d months\",\n        y: \"a year\",\n        yy: \"%d years\"\n    };\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);\n    }\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? \"future\" : \"past\"];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n    var aliases = {\n        D: \"date\",\n        dates: \"date\",\n        date: \"date\",\n        d: \"day\",\n        days: \"day\",\n        day: \"day\",\n        e: \"weekday\",\n        weekdays: \"weekday\",\n        weekday: \"weekday\",\n        E: \"isoWeekday\",\n        isoweekdays: \"isoWeekday\",\n        isoweekday: \"isoWeekday\",\n        DDD: \"dayOfYear\",\n        dayofyears: \"dayOfYear\",\n        dayofyear: \"dayOfYear\",\n        h: \"hour\",\n        hours: \"hour\",\n        hour: \"hour\",\n        ms: \"millisecond\",\n        milliseconds: \"millisecond\",\n        millisecond: \"millisecond\",\n        m: \"minute\",\n        minutes: \"minute\",\n        minute: \"minute\",\n        M: \"month\",\n        months: \"month\",\n        month: \"month\",\n        Q: \"quarter\",\n        quarters: \"quarter\",\n        quarter: \"quarter\",\n        s: \"second\",\n        seconds: \"second\",\n        second: \"second\",\n        gg: \"weekYear\",\n        weekyears: \"weekYear\",\n        weekyear: \"weekYear\",\n        GG: \"isoWeekYear\",\n        isoweekyears: \"isoWeekYear\",\n        isoweekyear: \"isoWeekYear\",\n        w: \"week\",\n        weeks: \"week\",\n        week: \"week\",\n        W: \"isoWeek\",\n        isoweeks: \"isoWeek\",\n        isoweek: \"isoWeek\",\n        y: \"year\",\n        years: \"year\",\n        year: \"year\"\n    };\n    function normalizeUnits(units) {\n        return typeof units === \"string\" ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {}, normalizedProp, prop;\n        for(prop in inputObject){\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n        return normalizedInput;\n    }\n    var priorities = {\n        date: 9,\n        day: 11,\n        weekday: 11,\n        isoWeekday: 11,\n        dayOfYear: 4,\n        hour: 13,\n        millisecond: 16,\n        minute: 14,\n        month: 8,\n        quarter: 7,\n        second: 15,\n        weekYear: 1,\n        isoWeekYear: 1,\n        week: 5,\n        isoWeek: 5,\n        year: 1\n    };\n    function getPrioritizedUnits(unitsObj) {\n        var units = [], u;\n        for(u in unitsObj){\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({\n                    unit: u,\n                    priority: priorities[u]\n                });\n            }\n        }\n        units.sort(function(a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n    var match1 = /\\d/, match2 = /\\d\\d/, match3 = /\\d{3}/, match4 = /\\d{4}/, match6 = /[+-]?\\d{6}/, match1to2 = /\\d\\d?/, match3to4 = /\\d\\d\\d\\d?/, match5to6 = /\\d\\d\\d\\d\\d\\d?/, match1to3 = /\\d{1,3}/, match1to4 = /\\d{1,4}/, match1to6 = /[+-]?\\d{1,6}/, matchUnsigned = /\\d+/, matchSigned = /[+-]?\\d+/, matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\\d?/, match1to2HasZero = /^([1-9]\\d|\\d)/, regexes;\n    regexes = {};\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {\n            return isStrict && strictRegex ? strictRegex : regex;\n        };\n    }\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n        return regexes[token](config._strict, config._locale);\n    }\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace(\"\\\\\", \"\").replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function(matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion, value = 0;\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n        return value;\n    }\n    var tokens = {};\n    function addParseToken(token, callback) {\n        var i, func = callback, tokenLen;\n        if (typeof token === \"string\") {\n            token = [\n                token\n            ];\n        }\n        if (isNumber(callback)) {\n            func = function(input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        tokenLen = token.length;\n        for(i = 0; i < tokenLen; i++){\n            tokens[token[i]] = func;\n        }\n    }\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function(input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n    function isLeapYear(year) {\n        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    }\n    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;\n    // FORMATTING\n    addFormatToken(\"Y\", 0, 0, function() {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : \"+\" + y;\n    });\n    addFormatToken(0, [\n        \"YY\",\n        2\n    ], 0, function() {\n        return this.year() % 100;\n    });\n    addFormatToken(0, [\n        \"YYYY\",\n        4\n    ], 0, \"year\");\n    addFormatToken(0, [\n        \"YYYYY\",\n        5\n    ], 0, \"year\");\n    addFormatToken(0, [\n        \"YYYYYY\",\n        6,\n        true\n    ], 0, \"year\");\n    // PARSING\n    addRegexToken(\"Y\", matchSigned);\n    addRegexToken(\"YY\", match1to2, match2);\n    addRegexToken(\"YYYY\", match1to4, match4);\n    addRegexToken(\"YYYYY\", match1to6, match6);\n    addRegexToken(\"YYYYYY\", match1to6, match6);\n    addParseToken([\n        \"YYYYY\",\n        \"YYYYYY\"\n    ], YEAR);\n    addParseToken(\"YYYY\", function(input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken(\"YY\", function(input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken(\"Y\", function(input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n    // HELPERS\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n    // HOOKS\n    hooks.parseTwoDigitYear = function(input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n    // MOMENTS\n    var getSetYear = makeGetSet(\"FullYear\", true);\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n    function makeGetSet(unit, keepTime) {\n        return function(value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n    function get(mom, unit) {\n        if (!mom.isValid()) {\n            return NaN;\n        }\n        var d = mom._d, isUTC = mom._isUTC;\n        switch(unit){\n            case \"Milliseconds\":\n                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();\n            case \"Seconds\":\n                return isUTC ? d.getUTCSeconds() : d.getSeconds();\n            case \"Minutes\":\n                return isUTC ? d.getUTCMinutes() : d.getMinutes();\n            case \"Hours\":\n                return isUTC ? d.getUTCHours() : d.getHours();\n            case \"Date\":\n                return isUTC ? d.getUTCDate() : d.getDate();\n            case \"Day\":\n                return isUTC ? d.getUTCDay() : d.getDay();\n            case \"Month\":\n                return isUTC ? d.getUTCMonth() : d.getMonth();\n            case \"FullYear\":\n                return isUTC ? d.getUTCFullYear() : d.getFullYear();\n            default:\n                return NaN; // Just in case\n        }\n    }\n    function set$1(mom, unit, value) {\n        var d, isUTC, year, month, date;\n        if (!mom.isValid() || isNaN(value)) {\n            return;\n        }\n        d = mom._d;\n        isUTC = mom._isUTC;\n        switch(unit){\n            case \"Milliseconds\":\n                return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));\n            case \"Seconds\":\n                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));\n            case \"Minutes\":\n                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));\n            case \"Hours\":\n                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));\n            case \"Date\":\n                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));\n            // case 'Day': // Not real\n            //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));\n            // case 'Month': // Not used because we need to pass two variables\n            //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));\n            case \"FullYear\":\n                break; // See below ...\n            default:\n                return; // Just in case\n        }\n        year = value;\n        month = mom.month();\n        date = mom.date();\n        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;\n        void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));\n    }\n    // MOMENTS\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n    function stringSet(units, value) {\n        if (typeof units === \"object\") {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;\n            for(i = 0; i < prioritizedLen; i++){\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n    function mod(n, x) {\n        return (n % x + x) % x;\n    }\n    var indexOf;\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function(o) {\n            // I know\n            var i;\n            for(i = 0; i < this.length; ++i){\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;\n    }\n    // FORMATTING\n    addFormatToken(\"M\", [\n        \"MM\",\n        2\n    ], \"Mo\", function() {\n        return this.month() + 1;\n    });\n    addFormatToken(\"MMM\", 0, 0, function(format) {\n        return this.localeData().monthsShort(this, format);\n    });\n    addFormatToken(\"MMMM\", 0, 0, function(format) {\n        return this.localeData().months(this, format);\n    });\n    // PARSING\n    addRegexToken(\"M\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"MM\", match1to2, match2);\n    addRegexToken(\"MMM\", function(isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken(\"MMMM\", function(isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n    addParseToken([\n        \"M\",\n        \"MM\"\n    ], function(input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n    addParseToken([\n        \"MMM\",\n        \"MMMM\"\n    ], function(input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n    // LOCALES\n    var defaultLocaleMonths = \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"), defaultLocaleMonthsShort = \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"), MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months : this._months[\"standalone\"];\n        }\n        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? \"format\" : \"standalone\"][m.month()];\n    }\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort[\"standalone\"];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? \"format\" : \"standalone\"][m.month()];\n    }\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for(i = 0; i < 12; ++i){\n                mom = createUTC([\n                    2000,\n                    i\n                ]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, \"\").toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, \"\").toLocaleLowerCase();\n            }\n        }\n        if (strict) {\n            if (format === \"MMM\") {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === \"MMM\") {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for(i = 0; i < 12; i++){\n            // make the regex if we don't have it already\n            mom = createUTC([\n                2000,\n                i\n            ]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\"^\" + this.months(mom, \"\").replace(\".\", \"\") + \"$\", \"i\");\n                this._shortMonthsParse[i] = new RegExp(\"^\" + this.monthsShort(mom, \"\").replace(\".\", \"\") + \"$\", \"i\");\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = \"^\" + this.months(mom, \"\") + \"|^\" + this.monthsShort(mom, \"\");\n                this._monthsParse[i] = new RegExp(regex.replace(\".\", \"\"), \"i\");\n            }\n            // test the regex\n            if (strict && format === \"MMMM\" && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === \"MMM\" && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n    // MOMENTS\n    function setMonth(mom, value) {\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n        if (typeof value === \"string\") {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n        var month = value, date = mom.date();\n        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));\n        void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));\n        return mom;\n    }\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, \"Month\");\n        }\n    }\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, \"_monthsRegex\")) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \"_monthsShortRegex\")) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, \"_monthsRegex\")) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \"_monthsRegex\")) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;\n        for(i = 0; i < 12; i++){\n            // make the regex if we don't have it already\n            mom = createUTC([\n                2000,\n                i\n            ]);\n            shortP = regexEscape(this.monthsShort(mom, \"\"));\n            longP = regexEscape(this.months(mom, \"\"));\n            shortPieces.push(shortP);\n            longPieces.push(longP);\n            mixedPieces.push(longP);\n            mixedPieces.push(shortP);\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        this._monthsRegex = new RegExp(\"^(\" + mixedPieces.join(\"|\") + \")\", \"i\");\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\"^(\" + longPieces.join(\"|\") + \")\", \"i\");\n        this._monthsShortStrictRegex = new RegExp(\"^(\" + shortPieces.join(\"|\") + \")\", \"i\");\n    }\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n        return date;\n    }\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n        return date;\n    }\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd\n        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n        return -fwdlw + fwd - 1;\n    }\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n    // FORMATTING\n    addFormatToken(\"w\", [\n        \"ww\",\n        2\n    ], \"wo\", \"week\");\n    addFormatToken(\"W\", [\n        \"WW\",\n        2\n    ], \"Wo\", \"isoWeek\");\n    // PARSING\n    addRegexToken(\"w\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"ww\", match1to2, match2);\n    addRegexToken(\"W\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"WW\", match1to2, match2);\n    addWeekParseToken([\n        \"w\",\n        \"ww\",\n        \"W\",\n        \"WW\"\n    ], function(input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n    // HELPERS\n    // LOCALES\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n    var defaultLocaleWeek = {\n        dow: 0,\n        doy: 6\n    };\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n    // MOMENTS\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, \"d\");\n    }\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, \"d\");\n    }\n    // FORMATTING\n    addFormatToken(\"d\", 0, \"do\", \"day\");\n    addFormatToken(\"dd\", 0, 0, function(format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n    addFormatToken(\"ddd\", 0, 0, function(format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n    addFormatToken(\"dddd\", 0, 0, function(format) {\n        return this.localeData().weekdays(this, format);\n    });\n    addFormatToken(\"e\", 0, 0, \"weekday\");\n    addFormatToken(\"E\", 0, 0, \"isoWeekday\");\n    // PARSING\n    addRegexToken(\"d\", match1to2);\n    addRegexToken(\"e\", match1to2);\n    addRegexToken(\"E\", match1to2);\n    addRegexToken(\"dd\", function(isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken(\"ddd\", function(isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken(\"dddd\", function(isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n    addWeekParseToken([\n        \"dd\",\n        \"ddd\",\n        \"dddd\"\n    ], function(input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n    addWeekParseToken([\n        \"d\",\n        \"e\",\n        \"E\"\n    ], function(input, week, config, token) {\n        week[token] = toInt(input);\n    });\n    // HELPERS\n    function parseWeekday(input, locale) {\n        if (typeof input !== \"string\") {\n            return input;\n        }\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n        input = locale.weekdaysParse(input);\n        if (typeof input === \"number\") {\n            return input;\n        }\n        return null;\n    }\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === \"string\") {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n    var defaultLocaleWeekdays = \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"), defaultLocaleWeekdaysShort = \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"), defaultLocaleWeekdaysMin = \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? \"format\" : \"standalone\"];\n        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;\n    }\n    function localeWeekdaysShort(m) {\n        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n    function localeWeekdaysMin(m) {\n        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n            for(i = 0; i < 7; ++i){\n                mom = createUTC([\n                    2000,\n                    1\n                ]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, \"\").toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, \"\").toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, \"\").toLocaleLowerCase();\n            }\n        }\n        if (strict) {\n            if (format === \"dddd\") {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === \"ddd\") {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === \"dddd\") {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === \"ddd\") {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n        for(i = 0; i < 7; i++){\n            // make the regex if we don't have it already\n            mom = createUTC([\n                2000,\n                1\n            ]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\"^\" + this.weekdays(mom, \"\").replace(\".\", \"\\\\.?\") + \"$\", \"i\");\n                this._shortWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysShort(mom, \"\").replace(\".\", \"\\\\.?\") + \"$\", \"i\");\n                this._minWeekdaysParse[i] = new RegExp(\"^\" + this.weekdaysMin(mom, \"\").replace(\".\", \"\\\\.?\") + \"$\", \"i\");\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = \"^\" + this.weekdays(mom, \"\") + \"|^\" + this.weekdaysShort(mom, \"\") + \"|^\" + this.weekdaysMin(mom, \"\");\n                this._weekdaysParse[i] = new RegExp(regex.replace(\".\", \"\"), \"i\");\n            }\n            // test the regex\n            if (strict && format === \"dddd\" && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === \"ddd\" && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === \"dd\" && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n    // MOMENTS\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = get(this, \"Day\");\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, \"d\");\n        } else {\n            return day;\n        }\n    }\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, \"d\");\n    }\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \"_weekdaysRegex\")) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \"_weekdaysRegex\")) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \"_weekdaysRegex\")) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \"_weekdaysShortRegex\")) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \"_weekdaysRegex\")) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \"_weekdaysMinRegex\")) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;\n        for(i = 0; i < 7; i++){\n            // make the regex if we don't have it already\n            mom = createUTC([\n                2000,\n                1\n            ]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, \"\"));\n            shortp = regexEscape(this.weekdaysShort(mom, \"\"));\n            longp = regexEscape(this.weekdays(mom, \"\"));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        this._weekdaysRegex = new RegExp(\"^(\" + mixedPieces.join(\"|\") + \")\", \"i\");\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n        this._weekdaysStrictRegex = new RegExp(\"^(\" + longPieces.join(\"|\") + \")\", \"i\");\n        this._weekdaysShortStrictRegex = new RegExp(\"^(\" + shortPieces.join(\"|\") + \")\", \"i\");\n        this._weekdaysMinStrictRegex = new RegExp(\"^(\" + minPieces.join(\"|\") + \")\", \"i\");\n    }\n    // FORMATTING\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n    function kFormat() {\n        return this.hours() || 24;\n    }\n    addFormatToken(\"H\", [\n        \"HH\",\n        2\n    ], 0, \"hour\");\n    addFormatToken(\"h\", [\n        \"hh\",\n        2\n    ], 0, hFormat);\n    addFormatToken(\"k\", [\n        \"kk\",\n        2\n    ], 0, kFormat);\n    addFormatToken(\"hmm\", 0, 0, function() {\n        return \"\" + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n    addFormatToken(\"hmmss\", 0, 0, function() {\n        return \"\" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n    });\n    addFormatToken(\"Hmm\", 0, 0, function() {\n        return \"\" + this.hours() + zeroFill(this.minutes(), 2);\n    });\n    addFormatToken(\"Hmmss\", 0, 0, function() {\n        return \"\" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n    });\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function() {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n    meridiem(\"a\", true);\n    meridiem(\"A\", false);\n    // PARSING\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n    addRegexToken(\"a\", matchMeridiem);\n    addRegexToken(\"A\", matchMeridiem);\n    addRegexToken(\"H\", match1to2, match1to2HasZero);\n    addRegexToken(\"h\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"k\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"HH\", match1to2, match2);\n    addRegexToken(\"hh\", match1to2, match2);\n    addRegexToken(\"kk\", match1to2, match2);\n    addRegexToken(\"hmm\", match3to4);\n    addRegexToken(\"hmmss\", match5to6);\n    addRegexToken(\"Hmm\", match3to4);\n    addRegexToken(\"Hmmss\", match5to6);\n    addParseToken([\n        \"H\",\n        \"HH\"\n    ], HOUR);\n    addParseToken([\n        \"k\",\n        \"kk\"\n    ], function(input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken([\n        \"a\",\n        \"A\"\n    ], function(input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken([\n        \"h\",\n        \"hh\"\n    ], function(input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\"hmm\", function(input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\"hmmss\", function(input, array, config) {\n        var pos1 = input.length - 4, pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\"Hmm\", function(input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken(\"Hmmss\", function(input, array, config) {\n        var pos1 = input.length - 4, pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n    // LOCALES\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + \"\").toLowerCase().charAt(0) === \"p\";\n    }\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i, // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    getSetHour = makeGetSet(\"Hours\", true);\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? \"pm\" : \"PM\";\n        } else {\n            return isLower ? \"am\" : \"AM\";\n        }\n    }\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n        week: defaultLocaleWeek,\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n    // internal storage for locale config files\n    var locales = {}, localeFamilies = {}, globalLocale;\n    function commonPrefix(arr1, arr2) {\n        var i, minl = Math.min(arr1.length, arr2.length);\n        for(i = 0; i < minl; i += 1){\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace(\"_\", \"-\") : key;\n    }\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n        while(i < names.length){\n            split = normalizeLocale(names[i]).split(\"-\");\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split(\"-\") : null;\n            while(j > 0){\n                locale = loadLocale(split.slice(0, j).join(\"-\"));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n    function isLocaleNameSane(name) {\n        // Prevent names that look like filesystem paths, i.e contain '/' or '\\'\n        // Ensure name is available and function returns boolean\n        return !!(name && name.match(\"^[^/\\\\\\\\]*$\"));\n    }\n    function loadLocale(name) {\n        var oldLocale = null, aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (locales[name] === undefined && \"object\" !== \"undefined\" && module && module.exports && isLocaleNameSane(name)) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = undefined;\n                Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== \"undefined\" && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\"Locale \" + key + \" not found. Did you forget to load it?\");\n                }\n            }\n        }\n        return globalLocale._abbr;\n    }\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\"defineLocaleOverride\", \"use moment.updateLocale(localeName, config) to change \" + \"an existing locale. moment.defineLocale(localeName, \" + \"config) should only be used for creating a new locale \" + \"See http://momentjs.com/guides/#/warnings/define-locale/ for more info.\");\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function(x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n        if (!key) {\n            return globalLocale;\n        }\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [\n                key\n            ];\n        }\n        return chooseLocale(key);\n    }\n    function listLocales() {\n        return keys(locales);\n    }\n    function checkOverflow(m) {\n        var overflow, a = m._a;\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n            getParsingFlags(m).overflow = overflow;\n        }\n        return m;\n    }\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/, basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/, tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/, isoDates = [\n        [\n            \"YYYYYY-MM-DD\",\n            /[+-]\\d{6}-\\d\\d-\\d\\d/\n        ],\n        [\n            \"YYYY-MM-DD\",\n            /\\d{4}-\\d\\d-\\d\\d/\n        ],\n        [\n            \"GGGG-[W]WW-E\",\n            /\\d{4}-W\\d\\d-\\d/\n        ],\n        [\n            \"GGGG-[W]WW\",\n            /\\d{4}-W\\d\\d/,\n            false\n        ],\n        [\n            \"YYYY-DDD\",\n            /\\d{4}-\\d{3}/\n        ],\n        [\n            \"YYYY-MM\",\n            /\\d{4}-\\d\\d/,\n            false\n        ],\n        [\n            \"YYYYYYMMDD\",\n            /[+-]\\d{10}/\n        ],\n        [\n            \"YYYYMMDD\",\n            /\\d{8}/\n        ],\n        [\n            \"GGGG[W]WWE\",\n            /\\d{4}W\\d{3}/\n        ],\n        [\n            \"GGGG[W]WW\",\n            /\\d{4}W\\d{2}/,\n            false\n        ],\n        [\n            \"YYYYDDD\",\n            /\\d{7}/\n        ],\n        [\n            \"YYYYMM\",\n            /\\d{6}/,\n            false\n        ],\n        [\n            \"YYYY\",\n            /\\d{4}/,\n            false\n        ]\n    ], // iso time formats and regexes\n    isoTimes = [\n        [\n            \"HH:mm:ss.SSSS\",\n            /\\d\\d:\\d\\d:\\d\\d\\.\\d+/\n        ],\n        [\n            \"HH:mm:ss,SSSS\",\n            /\\d\\d:\\d\\d:\\d\\d,\\d+/\n        ],\n        [\n            \"HH:mm:ss\",\n            /\\d\\d:\\d\\d:\\d\\d/\n        ],\n        [\n            \"HH:mm\",\n            /\\d\\d:\\d\\d/\n        ],\n        [\n            \"HHmmss.SSSS\",\n            /\\d\\d\\d\\d\\d\\d\\.\\d+/\n        ],\n        [\n            \"HHmmss,SSSS\",\n            /\\d\\d\\d\\d\\d\\d,\\d+/\n        ],\n        [\n            \"HHmmss\",\n            /\\d\\d\\d\\d\\d\\d/\n        ],\n        [\n            \"HHmm\",\n            /\\d\\d\\d\\d/\n        ],\n        [\n            \"HH\",\n            /\\d\\d/\n        ]\n    ], aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/, obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n    // date from iso format\n    function configFromISO(config) {\n        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;\n        if (match) {\n            getParsingFlags(config).iso = true;\n            for(i = 0, l = isoDatesLen; i < l; i++){\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for(i = 0, l = isoTimesLen; i < l; i++){\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || \" \") + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = \"Z\";\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || \"\") + (tzFormat || \"\");\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n        return result;\n    }\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^()]*\\)|[\\n\\t]/g, \" \").replace(/(\\s\\s+)/g, \" \").replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n    }\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n    hooks.createFromInputFallback = deprecate(\"value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), \" + \"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are \" + \"discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.\", function(config) {\n        config._d = new Date(config._i + (config._useUTC ? \" UTC\" : \"\"));\n    });\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate()\n            ];\n        }\n        return [\n            nowValue.getFullYear(),\n            nowValue.getMonth(),\n            nowValue.getDate()\n        ];\n    }\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n        if (config._d) {\n            return;\n        }\n        currentDate = currentDateArray(config);\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for(i = 0; i < 3 && config._a[i] == null; ++i){\n            config._a[i] = input[i] = currentDate[i];\n        }\n        // Zero out whatever was not defaulted, including time\n        for(; i < 7; i++){\n            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n        }\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== \"undefined\" && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n            curWeek = weekOfYear(createLocal(), dow, doy);\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function() {};\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function() {};\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = \"\" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n        tokenLen = tokens.length;\n        for(i = 0; i < tokenLen; i++){\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n        configFromArray(config);\n        checkOverflow(config);\n    }\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;\n        if (configfLen === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n        for(i = 0; i < configfLen; i++){\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n            getParsingFlags(tempConfig).score = currentScore;\n            if (!bestFormatIsValid) {\n                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n        extend(config, bestMoment || tempConfig);\n    }\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map([\n            i.year,\n            i.month,\n            dayOrDate,\n            i.hour,\n            i.minute,\n            i.second,\n            i.millisecond\n        ], function(obj) {\n            return obj && parseInt(obj, 10);\n        });\n        configFromArray(config);\n    }\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, \"d\");\n            res._nextDay = undefined;\n        }\n        return res;\n    }\n    function prepareConfig(config) {\n        var input = config._i, format = config._f;\n        config._locale = config._locale || getLocale(config._l);\n        if (input === null || format === undefined && input === \"\") {\n            return createInvalid({\n                nullInput: true\n            });\n        }\n        if (typeof input === \"string\") {\n            config._i = input = config._locale.preparse(input);\n        }\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n        if (!isValid(config)) {\n            config._d = null;\n        }\n        return config;\n    }\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === \"string\") {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function(obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n        return createFromConfig(c);\n    }\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n    var prototypeMin = deprecate(\"moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/\", function() {\n        var other = createLocal.apply(null, arguments);\n        if (this.isValid() && other.isValid()) {\n            return other < this ? this : other;\n        } else {\n            return createInvalid();\n        }\n    }), prototypeMax = deprecate(\"moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/\", function() {\n        var other = createLocal.apply(null, arguments);\n        if (this.isValid() && other.isValid()) {\n            return other > this ? this : other;\n        } else {\n            return createInvalid();\n        }\n    });\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for(i = 1; i < moments.length; ++i){\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n        return pickBy(\"isBefore\", args);\n    }\n    function max() {\n        var args = [].slice.call(arguments, 0);\n        return pickBy(\"isAfter\", args);\n    }\n    var now = function() {\n        return Date.now ? Date.now() : +new Date();\n    };\n    var ordering = [\n        \"year\",\n        \"quarter\",\n        \"month\",\n        \"week\",\n        \"day\",\n        \"hour\",\n        \"minute\",\n        \"second\",\n        \"millisecond\"\n    ];\n    function isDurationValid(m) {\n        var key, unitHasDecimal = false, i, orderLen = ordering.length;\n        for(key in m){\n            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n        for(i = 0; i < orderLen; ++i){\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n        return true;\n    }\n    function isValid$1() {\n        return this._isValid;\n    }\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;\n        this._isValid = isDurationValid(normalizedInput);\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000\n        minutes * 6e4 + // 1000 * 60\n        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n        this._data = {};\n        this._locale = getLocale();\n        this._bubble();\n    }\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;\n        for(i = 0; i < len; i++){\n            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n    // FORMATTING\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function() {\n            var offset = this.utcOffset(), sign = \"+\";\n            if (offset < 0) {\n                offset = -offset;\n                sign = \"-\";\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);\n        });\n    }\n    offset(\"Z\", \":\");\n    offset(\"ZZ\", \"\");\n    // PARSING\n    addRegexToken(\"Z\", matchShortOffset);\n    addRegexToken(\"ZZ\", matchShortOffset);\n    addParseToken([\n        \"Z\",\n        \"ZZ\"\n    ], function(input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n    // HELPERS\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n    function offsetFromString(matcher, string) {\n        var matches = (string || \"\").match(matcher), chunk, parts, minutes;\n        if (matches === null) {\n            return null;\n        }\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + \"\").match(chunkOffset) || [\n            \"-\",\n            0,\n            0\n        ];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n        return minutes === 0 ? 0 : parts[0] === \"+\" ? minutes : -minutes;\n    }\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n    // HOOKS\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function() {};\n    // MOMENTS\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0, localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === \"string\") {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, \"m\");\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, \"m\"), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== \"string\") {\n                input = -input;\n            }\n            this.utcOffset(input, keepLocalTime);\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), \"m\");\n            }\n        }\n        return this;\n    }\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === \"string\") {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n    function isDaylightSavingTime() {\n        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n    }\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n        var c = {}, other;\n        copyConfig(c, this);\n        c = prepareConfig(c);\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n        return this._isDSTShifted;\n    }\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n    function createDuration(input, key) {\n        var duration = input, // matching against regexp is expensive, do it on demand\n        match = null, sign, ret, diffRes;\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if (match = aspNetRegex.exec(input)) {\n            sign = match[1] === \"-\" ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign\n            };\n        } else if (match = isoRegex.exec(input)) {\n            sign = match[1] === \"-\" ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign)\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (typeof duration === \"object\" && (\"from\" in duration || \"to\" in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n        ret = new Duration(duration);\n        if (isDuration(input) && hasOwnProp(input, \"_locale\")) {\n            ret._locale = input._locale;\n        }\n        if (isDuration(input) && hasOwnProp(input, \"_isValid\")) {\n            ret._isValid = input._isValid;\n        }\n        return ret;\n    }\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(\",\", \".\"));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, \"M\").isAfter(other)) {\n            --res.months;\n        }\n        res.milliseconds = +other - +base.clone().add(res.months, \"M\");\n        return res;\n    }\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {\n                milliseconds: 0,\n                months: 0\n            };\n        }\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n        return res;\n    }\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function(val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, \"moment().\" + name + \"(period, number) is deprecated. Please use moment().\" + name + \"(number, period). \" + \"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.\");\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n        updateOffset = updateOffset == null ? true : updateOffset;\n        if (months) {\n            setMonth(mom, get(mom, \"Month\") + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, \"Date\", get(mom, \"Date\") + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n    var add = createAdder(1, \"add\"), subtract = createAdder(-1, \"subtract\");\n    function isString(input) {\n        return typeof input === \"string\" || input instanceof String;\n    }\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;\n    }\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [\n            \"years\",\n            \"year\",\n            \"y\",\n            \"months\",\n            \"month\",\n            \"M\",\n            \"days\",\n            \"day\",\n            \"d\",\n            \"dates\",\n            \"date\",\n            \"D\",\n            \"hours\",\n            \"hour\",\n            \"h\",\n            \"minutes\",\n            \"minute\",\n            \"m\",\n            \"seconds\",\n            \"second\",\n            \"s\",\n            \"milliseconds\",\n            \"millisecond\",\n            \"ms\"\n        ], i, property, propertyLen = properties.length;\n        for(i = 0; i < propertyLen; i += 1){\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n        return objectTest && propertyTest;\n    }\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input), dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest = input.filter(function(item) {\n                return !isNumber(item) && isString(input);\n            }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [\n            \"sameDay\",\n            \"nextDay\",\n            \"lastDay\",\n            \"nextWeek\",\n            \"lastWeek\",\n            \"sameElse\"\n        ], i, property;\n        for(i = 0; i < properties.length; i += 1){\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n        return objectTest && propertyTest;\n    }\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, \"days\", true);\n        return diff < -6 ? \"sameElse\" : diff < -1 ? \"lastWeek\" : diff < 0 ? \"lastDay\" : diff < 1 ? \"sameDay\" : diff < 2 ? \"nextDay\" : diff < 7 ? \"nextWeek\" : \"sameElse\";\n    }\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (!arguments[0]) {\n                time = undefined;\n                formats = undefined;\n            } else if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf(\"day\"), format = hooks.calendarFormat(this, sod) || \"sameElse\", output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n    function clone() {\n        return new Moment(this);\n    }\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || \"millisecond\";\n        if (units === \"millisecond\") {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || \"millisecond\";\n        if (units === \"millisecond\") {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || \"()\";\n        return (inclusivity[0] === \"(\" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === \")\" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n    }\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input), inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || \"millisecond\";\n        if (units === \"millisecond\") {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n        if (!this.isValid()) {\n            return NaN;\n        }\n        that = cloneWithOffset(input, this);\n        if (!that.isValid()) {\n            return NaN;\n        }\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n        units = normalizeUnits(units);\n        switch(units){\n            case \"year\":\n                output = monthDiff(this, that) / 12;\n                break;\n            case \"month\":\n                output = monthDiff(this, that);\n                break;\n            case \"quarter\":\n                output = monthDiff(this, that) / 3;\n                break;\n            case \"second\":\n                output = (this - that) / 1e3;\n                break; // 1000\n            case \"minute\":\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case \"hour\":\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case \"day\":\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case \"week\":\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)\n        anchor = a.clone().add(wholeMonthDiff, \"months\"), anchor2, adjust;\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, \"months\");\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, \"months\");\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n    hooks.defaultFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\n    hooks.defaultFormatUtc = \"YYYY-MM-DDTHH:mm:ss[Z]\";\n    function toString() {\n        return this.clone().locale(\"en\").format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n    }\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? \"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]\" : \"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ\");\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace(\"Z\", formatMoment(m, \"Z\"));\n            }\n        }\n        return formatMoment(m, utc ? \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\" : \"YYYY-MM-DD[T]HH:mm:ss.SSSZ\");\n    }\n    /**\r\n     * Return a human readable representation of a moment that can\r\n     * also be evaluated to get a new moment which is the same\r\n     *\r\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\r\n     */ function inspect() {\n        if (!this.isValid()) {\n            return \"moment.invalid(/* \" + this._i + \" */)\";\n        }\n        var func = \"moment\", zone = \"\", prefix, year, datetime, suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? \"moment.utc\" : \"moment.parseZone\";\n            zone = \"Z\";\n        }\n        prefix = \"[\" + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? \"YYYY\" : \"YYYYYY\";\n        datetime = \"-MM-DD[T]HH:mm:ss.SSS\";\n        suffix = zone + '[\")]';\n        return this.format(prefix + year + datetime + suffix);\n    }\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n    function from(time, withoutSuffix) {\n        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n            return createDuration({\n                to: this,\n                from: time\n            }).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n    function to(time, withoutSuffix) {\n        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n            return createDuration({\n                from: this,\n                to: time\n            }).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n    var lang = deprecate(\"moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.\", function(key) {\n        if (key === undefined) {\n            return this.localeData();\n        } else {\n            return this.locale(key);\n        }\n    });\n    function localeData() {\n        return this._locale;\n    }\n    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return (dividend % divisor + divisor) % divisor;\n    }\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === \"millisecond\" || !this.isValid()) {\n            return this;\n        }\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n        switch(units){\n            case \"year\":\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case \"quarter\":\n                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n                break;\n            case \"month\":\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case \"week\":\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n                break;\n            case \"isoWeek\":\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n                break;\n            case \"day\":\n            case \"date\":\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case \"hour\":\n                time = this._d.valueOf();\n                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n                break;\n            case \"minute\":\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case \"second\":\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === \"millisecond\" || !this.isValid()) {\n            return this;\n        }\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n        switch(units){\n            case \"year\":\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case \"quarter\":\n                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n                break;\n            case \"month\":\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case \"week\":\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n                break;\n            case \"isoWeek\":\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n                break;\n            case \"day\":\n            case \"date\":\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case \"hour\":\n                time = this._d.valueOf();\n                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n                break;\n            case \"minute\":\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case \"second\":\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond()\n        ];\n    }\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n    function isValid$2() {\n        return isValid(this);\n    }\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n    addFormatToken(\"N\", 0, 0, \"eraAbbr\");\n    addFormatToken(\"NN\", 0, 0, \"eraAbbr\");\n    addFormatToken(\"NNN\", 0, 0, \"eraAbbr\");\n    addFormatToken(\"NNNN\", 0, 0, \"eraName\");\n    addFormatToken(\"NNNNN\", 0, 0, \"eraNarrow\");\n    addFormatToken(\"y\", [\n        \"y\",\n        1\n    ], \"yo\", \"eraYear\");\n    addFormatToken(\"y\", [\n        \"yy\",\n        2\n    ], 0, \"eraYear\");\n    addFormatToken(\"y\", [\n        \"yyy\",\n        3\n    ], 0, \"eraYear\");\n    addFormatToken(\"y\", [\n        \"yyyy\",\n        4\n    ], 0, \"eraYear\");\n    addRegexToken(\"N\", matchEraAbbr);\n    addRegexToken(\"NN\", matchEraAbbr);\n    addRegexToken(\"NNN\", matchEraAbbr);\n    addRegexToken(\"NNNN\", matchEraName);\n    addRegexToken(\"NNNNN\", matchEraNarrow);\n    addParseToken([\n        \"N\",\n        \"NN\",\n        \"NNN\",\n        \"NNNN\",\n        \"NNNNN\"\n    ], function(input, array, config, token) {\n        var era = config._locale.erasParse(input, token, config._strict);\n        if (era) {\n            getParsingFlags(config).era = era;\n        } else {\n            getParsingFlags(config).invalidEra = input;\n        }\n    });\n    addRegexToken(\"y\", matchUnsigned);\n    addRegexToken(\"yy\", matchUnsigned);\n    addRegexToken(\"yyy\", matchUnsigned);\n    addRegexToken(\"yyyy\", matchUnsigned);\n    addRegexToken(\"yo\", matchEraYearOrdinal);\n    addParseToken([\n        \"y\",\n        \"yy\",\n        \"yyy\",\n        \"yyyy\"\n    ], YEAR);\n    addParseToken([\n        \"yo\"\n    ], function(input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n    function localeEras(m, format) {\n        var i, l, date, eras = this._eras || getLocale(\"en\")._eras;\n        for(i = 0, l = eras.length; i < l; ++i){\n            switch(typeof eras[i].since){\n                case \"string\":\n                    // truncate time\n                    date = hooks(eras[i].since).startOf(\"day\");\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n            switch(typeof eras[i].until){\n                case \"undefined\":\n                    eras[i].until = +Infinity;\n                    break;\n                case \"string\":\n                    // truncate time\n                    date = hooks(eras[i].until).startOf(\"day\").valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n    function localeErasParse(eraName, format, strict) {\n        var i, l, eras = this.eras(), name, abbr, narrow;\n        eraName = eraName.toUpperCase();\n        for(i = 0, l = eras.length; i < l; ++i){\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n            if (strict) {\n                switch(format){\n                    case \"N\":\n                    case \"NN\":\n                    case \"NNN\":\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                    case \"NNNN\":\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                    case \"NNNNN\":\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([\n                name,\n                abbr,\n                narrow\n            ].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n    function getEraName() {\n        var i, l, val, eras = this.localeData().eras();\n        for(i = 0, l = eras.length; i < l; ++i){\n            // truncate time\n            val = this.clone().startOf(\"day\").valueOf();\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n        return \"\";\n    }\n    function getEraNarrow() {\n        var i, l, val, eras = this.localeData().eras();\n        for(i = 0, l = eras.length; i < l; ++i){\n            // truncate time\n            val = this.clone().startOf(\"day\").valueOf();\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n        return \"\";\n    }\n    function getEraAbbr() {\n        var i, l, val, eras = this.localeData().eras();\n        for(i = 0, l = eras.length; i < l; ++i){\n            // truncate time\n            val = this.clone().startOf(\"day\").valueOf();\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n        return \"\";\n    }\n    function getEraYear() {\n        var i, l, dir, val, eras = this.localeData().eras();\n        for(i = 0, l = eras.length; i < l; ++i){\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n            // truncate time\n            val = this.clone().startOf(\"day\").valueOf();\n            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {\n                return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;\n            }\n        }\n        return this.year();\n    }\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, \"_erasNameRegex\")) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, \"_erasAbbrRegex\")) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, \"_erasNarrowRegex\")) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n    function computeErasParse() {\n        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();\n        for(i = 0, l = eras.length; i < l; ++i){\n            erasName = regexEscape(eras[i].name);\n            erasAbbr = regexEscape(eras[i].abbr);\n            erasNarrow = regexEscape(eras[i].narrow);\n            namePieces.push(erasName);\n            abbrPieces.push(erasAbbr);\n            narrowPieces.push(erasNarrow);\n            mixedPieces.push(erasName);\n            mixedPieces.push(erasAbbr);\n            mixedPieces.push(erasNarrow);\n        }\n        this._erasRegex = new RegExp(\"^(\" + mixedPieces.join(\"|\") + \")\", \"i\");\n        this._erasNameRegex = new RegExp(\"^(\" + namePieces.join(\"|\") + \")\", \"i\");\n        this._erasAbbrRegex = new RegExp(\"^(\" + abbrPieces.join(\"|\") + \")\", \"i\");\n        this._erasNarrowRegex = new RegExp(\"^(\" + narrowPieces.join(\"|\") + \")\", \"i\");\n    }\n    // FORMATTING\n    addFormatToken(0, [\n        \"gg\",\n        2\n    ], 0, function() {\n        return this.weekYear() % 100;\n    });\n    addFormatToken(0, [\n        \"GG\",\n        2\n    ], 0, function() {\n        return this.isoWeekYear() % 100;\n    });\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [\n            token,\n            token.length\n        ], 0, getter);\n    }\n    addWeekYearFormatToken(\"gggg\", \"weekYear\");\n    addWeekYearFormatToken(\"ggggg\", \"weekYear\");\n    addWeekYearFormatToken(\"GGGG\", \"isoWeekYear\");\n    addWeekYearFormatToken(\"GGGGG\", \"isoWeekYear\");\n    // ALIASES\n    // PARSING\n    addRegexToken(\"G\", matchSigned);\n    addRegexToken(\"g\", matchSigned);\n    addRegexToken(\"GG\", match1to2, match2);\n    addRegexToken(\"gg\", match1to2, match2);\n    addRegexToken(\"GGGG\", match1to4, match4);\n    addRegexToken(\"gggg\", match1to4, match4);\n    addRegexToken(\"GGGGG\", match1to6, match6);\n    addRegexToken(\"ggggg\", match1to6, match6);\n    addWeekParseToken([\n        \"gggg\",\n        \"ggggg\",\n        \"GGGG\",\n        \"GGGGG\"\n    ], function(input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n    addWeekParseToken([\n        \"gg\",\n        \"GG\"\n    ], function(input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n    // MOMENTS\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);\n    }\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n    // FORMATTING\n    addFormatToken(\"Q\", 0, \"Qo\", \"quarter\");\n    // PARSING\n    addRegexToken(\"Q\", match1);\n    addParseToken(\"Q\", function(input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n    // MOMENTS\n    function getSetQuarter(input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n    // FORMATTING\n    addFormatToken(\"D\", [\n        \"DD\",\n        2\n    ], \"Do\", \"date\");\n    // PARSING\n    addRegexToken(\"D\", match1to2, match1to2NoLeadingZero);\n    addRegexToken(\"DD\", match1to2, match2);\n    addRegexToken(\"Do\", function(isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;\n    });\n    addParseToken([\n        \"D\",\n        \"DD\"\n    ], DATE);\n    addParseToken(\"Do\", function(input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n    // MOMENTS\n    var getSetDayOfMonth = makeGetSet(\"Date\", true);\n    // FORMATTING\n    addFormatToken(\"DDD\", [\n        \"DDDD\",\n        3\n    ], \"DDDo\", \"dayOfYear\");\n    // PARSING\n    addRegexToken(\"DDD\", match1to3);\n    addRegexToken(\"DDDD\", match3);\n    addParseToken([\n        \"DDD\",\n        \"DDDD\"\n    ], function(input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n    // HELPERS\n    // MOMENTS\n    function getSetDayOfYear(input) {\n        var dayOfYear = Math.round((this.clone().startOf(\"day\") - this.clone().startOf(\"year\")) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, \"d\");\n    }\n    // FORMATTING\n    addFormatToken(\"m\", [\n        \"mm\",\n        2\n    ], 0, \"minute\");\n    // PARSING\n    addRegexToken(\"m\", match1to2, match1to2HasZero);\n    addRegexToken(\"mm\", match1to2, match2);\n    addParseToken([\n        \"m\",\n        \"mm\"\n    ], MINUTE);\n    // MOMENTS\n    var getSetMinute = makeGetSet(\"Minutes\", false);\n    // FORMATTING\n    addFormatToken(\"s\", [\n        \"ss\",\n        2\n    ], 0, \"second\");\n    // PARSING\n    addRegexToken(\"s\", match1to2, match1to2HasZero);\n    addRegexToken(\"ss\", match1to2, match2);\n    addParseToken([\n        \"s\",\n        \"ss\"\n    ], SECOND);\n    // MOMENTS\n    var getSetSecond = makeGetSet(\"Seconds\", false);\n    // FORMATTING\n    addFormatToken(\"S\", 0, 0, function() {\n        return ~~(this.millisecond() / 100);\n    });\n    addFormatToken(0, [\n        \"SS\",\n        2\n    ], 0, function() {\n        return ~~(this.millisecond() / 10);\n    });\n    addFormatToken(0, [\n        \"SSS\",\n        3\n    ], 0, \"millisecond\");\n    addFormatToken(0, [\n        \"SSSS\",\n        4\n    ], 0, function() {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, [\n        \"SSSSS\",\n        5\n    ], 0, function() {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, [\n        \"SSSSSS\",\n        6\n    ], 0, function() {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, [\n        \"SSSSSSS\",\n        7\n    ], 0, function() {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, [\n        \"SSSSSSSS\",\n        8\n    ], 0, function() {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, [\n        \"SSSSSSSSS\",\n        9\n    ], 0, function() {\n        return this.millisecond() * 1000000;\n    });\n    // PARSING\n    addRegexToken(\"S\", match1to3, match1);\n    addRegexToken(\"SS\", match1to3, match2);\n    addRegexToken(\"SSS\", match1to3, match3);\n    var token, getSetMillisecond;\n    for(token = \"SSSS\"; token.length <= 9; token += \"S\"){\n        addRegexToken(token, matchUnsigned);\n    }\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt((\"0.\" + input) * 1000);\n    }\n    for(token = \"S\"; token.length <= 9; token += \"S\"){\n        addParseToken(token, parseMs);\n    }\n    getSetMillisecond = makeGetSet(\"Milliseconds\", false);\n    // FORMATTING\n    addFormatToken(\"z\", 0, 0, \"zoneAbbr\");\n    addFormatToken(\"zz\", 0, 0, \"zoneName\");\n    // MOMENTS\n    function getZoneAbbr() {\n        return this._isUTC ? \"UTC\" : \"\";\n    }\n    function getZoneName() {\n        return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n    }\n    var proto = Moment.prototype;\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== \"undefined\" && Symbol.for != null) {\n        proto[Symbol.for(\"nodejs.util.inspect.custom\")] = function() {\n            return \"Moment<\" + this.format() + \">\";\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\"dates accessor is deprecated. Use date instead.\", getSetDayOfMonth);\n    proto.months = deprecate(\"months accessor is deprecated. Use month instead\", getSetMonth);\n    proto.years = deprecate(\"years accessor is deprecated. Use year instead\", getSetYear);\n    proto.zone = deprecate(\"moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/\", getSetZone);\n    proto.isDSTShifted = deprecate(\"isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information\", isDaylightSavingTimeShifted);\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n    function preParsePostFormat(string) {\n        return string;\n    }\n    var proto$1 = Locale.prototype;\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(), utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n        format = format || \"\";\n        if (index != null) {\n            return get$1(format, index, field, \"month\");\n        }\n        var i, out = [];\n        for(i = 0; i < 12; i++){\n            out[i] = get$1(format, i, field, \"month\");\n        }\n        return out;\n    }\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === \"boolean\") {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n            format = format || \"\";\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n            format = format || \"\";\n        }\n        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, \"day\");\n        }\n        for(i = 0; i < 7; i++){\n            out[i] = get$1(format, (i + shift) % 7, field, \"day\");\n        }\n        return out;\n    }\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, \"months\");\n    }\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, \"monthsShort\");\n    }\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \"weekdays\");\n    }\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \"weekdaysShort\");\n    }\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \"weekdaysMin\");\n    }\n    getSetGlobalLocale(\"en\", {\n        eras: [\n            {\n                since: \"0001-01-01\",\n                until: +Infinity,\n                offset: 1,\n                name: \"Anno Domini\",\n                narrow: \"AD\",\n                abbr: \"AD\"\n            },\n            {\n                since: \"0000-12-31\",\n                until: -Infinity,\n                offset: 1,\n                name: \"Before Christ\",\n                narrow: \"BC\",\n                abbr: \"BC\"\n            }\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function(number) {\n            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? \"th\" : b === 1 ? \"st\" : b === 2 ? \"nd\" : b === 3 ? \"rd\" : \"th\";\n            return number + output;\n        }\n    });\n    // Side effect imports\n    hooks.lang = deprecate(\"moment.lang is deprecated. Use moment.locale instead.\", getSetGlobalLocale);\n    hooks.langData = deprecate(\"moment.langData is deprecated. Use moment.localeData instead.\", getLocale);\n    var mathAbs = Math.abs;\n    function abs() {\n        var data = this._data;\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n        return this;\n    }\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n        return duration._bubble();\n    }\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n    function bubble() {\n        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n        days += absFloor(hours / 24);\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n        data.days = days;\n        data.months = months;\n        data.years = years;\n        return this;\n    }\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days, months, milliseconds = this._milliseconds;\n        units = normalizeUnits(units);\n        if (units === \"month\" || units === \"quarter\" || units === \"year\") {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch(units){\n                case \"month\":\n                    return months;\n                case \"quarter\":\n                    return months / 3;\n                case \"year\":\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch(units){\n                case \"week\":\n                    return days / 7 + milliseconds / 6048e5;\n                case \"day\":\n                    return days + milliseconds / 864e5;\n                case \"hour\":\n                    return days * 24 + milliseconds / 36e5;\n                case \"minute\":\n                    return days * 1440 + milliseconds / 6e4;\n                case \"second\":\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case \"millisecond\":\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error(\"Unknown unit \" + units);\n            }\n        }\n    }\n    function makeAs(alias) {\n        return function() {\n            return this.as(alias);\n        };\n    }\n    var asMilliseconds = makeAs(\"ms\"), asSeconds = makeAs(\"s\"), asMinutes = makeAs(\"m\"), asHours = makeAs(\"h\"), asDays = makeAs(\"d\"), asWeeks = makeAs(\"w\"), asMonths = makeAs(\"M\"), asQuarters = makeAs(\"Q\"), asYears = makeAs(\"y\"), valueOf$1 = asMilliseconds;\n    function clone$1() {\n        return createDuration(this);\n    }\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + \"s\"]() : NaN;\n    }\n    function makeGetter(name) {\n        return function() {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n    var milliseconds = makeGetter(\"milliseconds\"), seconds = makeGetter(\"seconds\"), minutes = makeGetter(\"minutes\"), hours = makeGetter(\"hours\"), days = makeGetter(\"days\"), months = makeGetter(\"months\"), years = makeGetter(\"years\");\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n    var round = Math.round, thresholds = {\n        ss: 44,\n        s: 45,\n        m: 45,\n        h: 22,\n        d: 26,\n        w: null,\n        M: 11\n    };\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as(\"s\")), minutes = round(duration.as(\"m\")), hours = round(duration.as(\"h\")), days = round(duration.as(\"d\")), months = round(duration.as(\"M\")), weeks = round(duration.as(\"w\")), years = round(duration.as(\"y\")), a = seconds <= thresholds.ss && [\n            \"s\",\n            seconds\n        ] || seconds < thresholds.s && [\n            \"ss\",\n            seconds\n        ] || minutes <= 1 && [\n            \"m\"\n        ] || minutes < thresholds.m && [\n            \"mm\",\n            minutes\n        ] || hours <= 1 && [\n            \"h\"\n        ] || hours < thresholds.h && [\n            \"hh\",\n            hours\n        ] || days <= 1 && [\n            \"d\"\n        ] || days < thresholds.d && [\n            \"dd\",\n            days\n        ];\n        if (thresholds.w != null) {\n            a = a || weeks <= 1 && [\n                \"w\"\n            ] || weeks < thresholds.w && [\n                \"ww\",\n                weeks\n            ];\n        }\n        a = a || months <= 1 && [\n            \"M\"\n        ] || months < thresholds.M && [\n            \"MM\",\n            months\n        ] || years <= 1 && [\n            \"y\"\n        ] || [\n            \"yy\",\n            years\n        ];\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === \"function\") {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === \"s\") {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n        var withSuffix = false, th = thresholds, locale, output;\n        if (typeof argWithSuffix === \"object\") {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === \"boolean\") {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === \"object\") {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n        return locale.postformat(output);\n    }\n    var abs$1 = Math.abs;\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return \"P0D\";\n        }\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, \"\") : \"\";\n        totalSign = total < 0 ? \"-\" : \"\";\n        ymSign = sign(this._months) !== sign(total) ? \"-\" : \"\";\n        daysSign = sign(this._days) !== sign(total) ? \"-\" : \"\";\n        hmsSign = sign(this._milliseconds) !== sign(total) ? \"-\" : \"\";\n        return totalSign + \"P\" + (years ? ymSign + years + \"Y\" : \"\") + (months ? ymSign + months + \"M\" : \"\") + (days ? daysSign + days + \"D\" : \"\") + (hours || minutes || seconds ? \"T\" : \"\") + (hours ? hmsSign + hours + \"H\" : \"\") + (minutes ? hmsSign + minutes + \"M\" : \"\") + (seconds ? hmsSign + s + \"S\" : \"\");\n    }\n    var proto$2 = Duration.prototype;\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n    proto$2.toIsoString = deprecate(\"toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)\", toISOString$1);\n    proto$2.lang = lang;\n    // FORMATTING\n    addFormatToken(\"X\", 0, 0, \"unix\");\n    addFormatToken(\"x\", 0, 0, \"valueOf\");\n    // PARSING\n    addRegexToken(\"x\", matchSigned);\n    addRegexToken(\"X\", matchTimestamp);\n    addParseToken(\"X\", function(input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken(\"x\", function(input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n    //! moment.js\n    hooks.version = \"2.30.1\";\n    setHookCallback(createLocal);\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: \"YYYY-MM-DDTHH:mm\",\n        DATETIME_LOCAL_SECONDS: \"YYYY-MM-DDTHH:mm:ss\",\n        DATETIME_LOCAL_MS: \"YYYY-MM-DDTHH:mm:ss.SSS\",\n        DATE: \"YYYY-MM-DD\",\n        TIME: \"HH:mm\",\n        TIME_SECONDS: \"HH:mm:ss\",\n        TIME_MS: \"HH:mm:ss.SSS\",\n        WEEK: \"GGGG-[W]WW\",\n        MONTH: \"YYYY-MM\"\n    };\n    return hooks;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/moment/moment.js\n");

/***/ })

};
;