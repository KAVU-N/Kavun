"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-easy-crop";
exports.ids = ["vendor-chunks/react-easy-crop"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-easy-crop/index.module.js":
/*!******************************************************!*\
  !*** ./node_modules/react-easy-crop/index.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cropper),\n/* harmony export */   getInitialCropFromCroppedAreaPercentages: () => (/* binding */ getInitialCropFromCroppedAreaPercentages),\n/* harmony export */   getInitialCropFromCroppedAreaPixels: () => (/* binding */ getInitialCropFromCroppedAreaPixels)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/react-easy-crop/node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! normalize-wheel */ \"(ssr)/./node_modules/normalize-wheel/index.js\");\n/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(normalize_wheel__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/**\r\n * Compute the dimension of the crop area based on media size,\r\n * aspect ratio and optionally rotation\r\n */ function getCropSize(mediaWidth, mediaHeight, containerWidth, containerHeight, aspect, rotation) {\n    if (rotation === void 0) {\n        rotation = 0;\n    }\n    var _a = rotateSize(mediaWidth, mediaHeight, rotation), width = _a.width, height = _a.height;\n    var fittingWidth = Math.min(width, containerWidth);\n    var fittingHeight = Math.min(height, containerHeight);\n    if (fittingWidth > fittingHeight * aspect) {\n        return {\n            width: fittingHeight * aspect,\n            height: fittingHeight\n        };\n    }\n    return {\n        width: fittingWidth,\n        height: fittingWidth / aspect\n    };\n}\n/**\r\n * Compute media zoom.\r\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\r\n */ function getMediaZoom(mediaSize) {\n    // Take the axis with more pixels to improve accuracy\n    return mediaSize.width > mediaSize.height ? mediaSize.width / mediaSize.naturalWidth : mediaSize.height / mediaSize.naturalHeight;\n}\n/**\r\n * Ensure a new media position stays in the crop area.\r\n */ function restrictPosition(position, mediaSize, cropSize, zoom, rotation) {\n    if (rotation === void 0) {\n        rotation = 0;\n    }\n    var _a = rotateSize(mediaSize.width, mediaSize.height, rotation), width = _a.width, height = _a.height;\n    return {\n        x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n        y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n    };\n}\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n    var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n    return clamp(position, -maxPosition, maxPosition);\n}\nfunction getDistanceBetweenPoints(pointA, pointB) {\n    return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\nfunction getRotationBetweenPoints(pointA, pointB) {\n    return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\r\n * Compute the output cropped area of the media in percentages and pixels.\r\n * x/y are the top-left coordinates on the src media\r\n */ function computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom, rotation, restrictPosition) {\n    if (rotation === void 0) {\n        rotation = 0;\n    }\n    if (restrictPosition === void 0) {\n        restrictPosition = true;\n    }\n    // if the media is rotated by the user, we cannot limit the position anymore\n    // as it might need to be negative.\n    var limitAreaFn = restrictPosition ? limitArea : noOp;\n    var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation);\n    var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation);\n    // calculate the crop area in percentages\n    // in the rotated space\n    var croppedAreaPercentages = {\n        x: limitAreaFn(100, ((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width * 100),\n        y: limitAreaFn(100, ((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaBBoxSize.height * 100),\n        width: limitAreaFn(100, cropSize.width / mediaBBoxSize.width * 100 / zoom),\n        height: limitAreaFn(100, cropSize.height / mediaBBoxSize.height * 100 / zoom)\n    };\n    // we compute the pixels size naively\n    var widthInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.width, croppedAreaPercentages.width * mediaNaturalBBoxSize.width / 100));\n    var heightInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.height, croppedAreaPercentages.height * mediaNaturalBBoxSize.height / 100));\n    var isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect;\n    // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n    // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n    // thus we want to compute the width from the height and aspect for accuracy.\n    // Otherwise, we compute the height from width and aspect.\n    var sizePixels = isImgWiderThanHigh ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels\n    } : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect)\n    };\n    var croppedAreaPixels = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, sizePixels), {\n        x: Math.round(limitAreaFn(mediaNaturalBBoxSize.width - sizePixels.width, croppedAreaPercentages.x * mediaNaturalBBoxSize.width / 100)),\n        y: Math.round(limitAreaFn(mediaNaturalBBoxSize.height - sizePixels.height, croppedAreaPercentages.y * mediaNaturalBBoxSize.height / 100))\n    });\n    return {\n        croppedAreaPercentages: croppedAreaPercentages,\n        croppedAreaPixels: croppedAreaPixels\n    };\n}\n/**\r\n * Ensure the returned value is between 0 and max\r\n */ function limitArea(max, value) {\n    return Math.min(max, Math.max(0, value));\n}\nfunction noOp(_max, value) {\n    return value;\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPercentages.\r\n */ function getInitialCropFromCroppedAreaPercentages(croppedAreaPercentages, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n    var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation);\n    // This is the inverse process of computeCroppedArea\n    var zoom = clamp(cropSize.width / mediaBBoxSize.width * (100 / croppedAreaPercentages.width), minZoom, maxZoom);\n    var crop = {\n        x: zoom * mediaBBoxSize.width / 2 - cropSize.width / 2 - mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n        y: zoom * mediaBBoxSize.height / 2 - cropSize.height / 2 - mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100)\n    };\n    return {\n        crop: crop,\n        zoom: zoom\n    };\n}\n/**\r\n * Compute zoom from the croppedAreaPixels\r\n */ function getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n    var mediaZoom = getMediaZoom(mediaSize);\n    return cropSize.height > cropSize.width ? cropSize.height / (croppedAreaPixels.height * mediaZoom) : cropSize.width / (croppedAreaPixels.width * mediaZoom);\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPixels\r\n */ function getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n    if (rotation === void 0) {\n        rotation = 0;\n    }\n    var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation);\n    var zoom = clamp(getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize), minZoom, maxZoom);\n    var cropZoom = cropSize.height > cropSize.width ? cropSize.height / croppedAreaPixels.height : cropSize.width / croppedAreaPixels.width;\n    var crop = {\n        x: ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n        y: ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n    };\n    return {\n        crop: crop,\n        zoom: zoom\n    };\n}\n/**\r\n * Return the point that is the center of point a and b\r\n */ function getCenter(a, b) {\n    return {\n        x: (b.x + a.x) / 2,\n        y: (b.y + a.y) / 2\n    };\n}\nfunction getRadianAngle(degreeValue) {\n    return degreeValue * Math.PI / 180;\n}\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */ function rotateSize(width, height, rotation) {\n    var rotRad = getRadianAngle(rotation);\n    return {\n        width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n        height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n    };\n}\n/**\r\n * Clamp value between min and max\r\n */ function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\r\n * Combine multiple class names into a single string.\r\n */ function classNames() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    return args.filter(function(value) {\n        if (typeof value === \"string\" && value.length > 0) {\n            return true;\n        }\n        return false;\n    }).join(\" \").trim();\n}\nvar css_248z = \".reactEasyCrop_Container {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  user-select: none;\\n  touch-action: none;\\n  cursor: move;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.reactEasyCrop_Image,\\n.reactEasyCrop_Video {\\n  will-change: transform; /* this improves performances and prevent painting issues on iOS Chrome */\\n}\\n\\n.reactEasyCrop_Contain {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: auto;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n.reactEasyCrop_Cover_Horizontal {\\n  width: 100%;\\n  height: auto;\\n}\\n.reactEasyCrop_Cover_Vertical {\\n  width: auto;\\n  height: 100%;\\n}\\n\\n.reactEasyCrop_CropArea {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  box-sizing: border-box;\\n  box-shadow: 0 0 0 9999em;\\n  color: rgba(0, 0, 0, 0.5);\\n  overflow: hidden;\\n}\\n\\n.reactEasyCrop_CropAreaRound {\\n  border-radius: 50%;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::before {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 0;\\n  bottom: 0;\\n  left: 33.33%;\\n  right: 33.33%;\\n  border-top: 0;\\n  border-bottom: 0;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::after {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 33.33%;\\n  bottom: 33.33%;\\n  left: 0;\\n  right: 0;\\n  border-left: 0;\\n  border-right: 0;\\n}\\n\";\nvar MIN_ZOOM = 1;\nvar MAX_ZOOM = 3;\nvar Cropper = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(Cropper, _super);\n    function Cropper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.imageRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        _this.videoRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n        _this.containerRef = null;\n        _this.styleRef = null;\n        _this.containerRect = null;\n        _this.mediaSize = {\n            width: 0,\n            height: 0,\n            naturalWidth: 0,\n            naturalHeight: 0\n        };\n        _this.dragStartPosition = {\n            x: 0,\n            y: 0\n        };\n        _this.dragStartCrop = {\n            x: 0,\n            y: 0\n        };\n        _this.gestureZoomStart = 0;\n        _this.gestureRotationStart = 0;\n        _this.isTouching = false;\n        _this.lastPinchDistance = 0;\n        _this.lastPinchRotation = 0;\n        _this.rafDragTimeout = null;\n        _this.rafPinchTimeout = null;\n        _this.wheelTimer = null;\n        _this.currentDoc = typeof document !== \"undefined\" ? document : null;\n        _this.currentWindow =  false ? 0 : null;\n        _this.resizeObserver = null;\n        _this.state = {\n            cropSize: null,\n            hasWheelJustStarted: false\n        };\n        _this.initResizeObserver = function() {\n            if (typeof window.ResizeObserver === \"undefined\" || !_this.containerRef) {\n                return;\n            }\n            var isFirstResize = true;\n            _this.resizeObserver = new window.ResizeObserver(function(entries) {\n                if (isFirstResize) {\n                    isFirstResize = false; // observe() is called on mount, we don't want to trigger a recompute on mount\n                    return;\n                }\n                _this.computeSizes();\n            });\n            _this.resizeObserver.observe(_this.containerRef);\n        };\n        // this is to prevent Safari on iOS >= 10 to zoom the page\n        _this.preventZoomSafari = function(e) {\n            return e.preventDefault();\n        };\n        _this.cleanEvents = function() {\n            if (!_this.currentDoc) return;\n            _this.currentDoc.removeEventListener(\"mousemove\", _this.onMouseMove);\n            _this.currentDoc.removeEventListener(\"mouseup\", _this.onDragStopped);\n            _this.currentDoc.removeEventListener(\"touchmove\", _this.onTouchMove);\n            _this.currentDoc.removeEventListener(\"touchend\", _this.onDragStopped);\n            _this.currentDoc.removeEventListener(\"gesturemove\", _this.onGestureMove);\n            _this.currentDoc.removeEventListener(\"gestureend\", _this.onGestureEnd);\n        };\n        _this.clearScrollEvent = function() {\n            if (_this.containerRef) _this.containerRef.removeEventListener(\"wheel\", _this.onWheel);\n            if (_this.wheelTimer) {\n                clearTimeout(_this.wheelTimer);\n            }\n        };\n        _this.onMediaLoad = function() {\n            var cropSize = _this.computeSizes();\n            if (cropSize) {\n                _this.emitCropData();\n                _this.setInitialCrop(cropSize);\n            }\n            if (_this.props.onMediaLoaded) {\n                _this.props.onMediaLoaded(_this.mediaSize);\n            }\n        };\n        _this.setInitialCrop = function(cropSize) {\n            if (_this.props.initialCroppedAreaPercentages) {\n                var _a = getInitialCropFromCroppedAreaPercentages(_this.props.initialCroppedAreaPercentages, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom), crop = _a.crop, zoom = _a.zoom;\n                _this.props.onCropChange(crop);\n                _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n            } else if (_this.props.initialCroppedAreaPixels) {\n                var _b = getInitialCropFromCroppedAreaPixels(_this.props.initialCroppedAreaPixels, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom), crop = _b.crop, zoom = _b.zoom;\n                _this.props.onCropChange(crop);\n                _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n            }\n        };\n        _this.computeSizes = function() {\n            var _a, _b, _c, _d, _e, _f;\n            var mediaRef = _this.imageRef.current || _this.videoRef.current;\n            if (mediaRef && _this.containerRef) {\n                _this.containerRect = _this.containerRef.getBoundingClientRect();\n                var containerAspect = _this.containerRect.width / _this.containerRect.height;\n                var naturalWidth = ((_a = _this.imageRef.current) === null || _a === void 0 ? void 0 : _a.naturalWidth) || ((_b = _this.videoRef.current) === null || _b === void 0 ? void 0 : _b.videoWidth) || 0;\n                var naturalHeight = ((_c = _this.imageRef.current) === null || _c === void 0 ? void 0 : _c.naturalHeight) || ((_d = _this.videoRef.current) === null || _d === void 0 ? void 0 : _d.videoHeight) || 0;\n                var isMediaScaledDown = mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight;\n                var mediaAspect = naturalWidth / naturalHeight;\n                // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n                // as the values they report are rounded. That will result in precision losses\n                // when calculating zoom. We use the fact that the media is positionned relative\n                // to the container. That allows us to use the container's dimensions\n                // and natural aspect ratio of the media to calculate accurate media size.\n                // However, for this to work, the container should not be rotated\n                var renderedMediaSize = void 0;\n                if (isMediaScaledDown) {\n                    switch(_this.props.objectFit){\n                        default:\n                        case \"contain\":\n                            renderedMediaSize = containerAspect > mediaAspect ? {\n                                width: _this.containerRect.height * mediaAspect,\n                                height: _this.containerRect.height\n                            } : {\n                                width: _this.containerRect.width,\n                                height: _this.containerRect.width / mediaAspect\n                            };\n                            break;\n                        case \"horizontal-cover\":\n                            renderedMediaSize = {\n                                width: _this.containerRect.width,\n                                height: _this.containerRect.width / mediaAspect\n                            };\n                            break;\n                        case \"vertical-cover\":\n                            renderedMediaSize = {\n                                width: _this.containerRect.height * mediaAspect,\n                                height: _this.containerRect.height\n                            };\n                            break;\n                        case \"auto-cover\":\n                            renderedMediaSize = naturalWidth > naturalHeight ? {\n                                width: _this.containerRect.width,\n                                height: _this.containerRect.width / mediaAspect\n                            } : {\n                                width: _this.containerRect.height * mediaAspect,\n                                height: _this.containerRect.height\n                            };\n                            break;\n                    }\n                } else {\n                    renderedMediaSize = {\n                        width: mediaRef.offsetWidth,\n                        height: mediaRef.offsetHeight\n                    };\n                }\n                _this.mediaSize = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, renderedMediaSize), {\n                    naturalWidth: naturalWidth,\n                    naturalHeight: naturalHeight\n                });\n                // set media size in the parent\n                if (_this.props.setMediaSize) {\n                    _this.props.setMediaSize(_this.mediaSize);\n                }\n                var cropSize = _this.props.cropSize ? _this.props.cropSize : getCropSize(_this.mediaSize.width, _this.mediaSize.height, _this.containerRect.width, _this.containerRect.height, _this.props.aspect, _this.props.rotation);\n                if (((_e = _this.state.cropSize) === null || _e === void 0 ? void 0 : _e.height) !== cropSize.height || ((_f = _this.state.cropSize) === null || _f === void 0 ? void 0 : _f.width) !== cropSize.width) {\n                    _this.props.onCropSizeChange && _this.props.onCropSizeChange(cropSize);\n                }\n                _this.setState({\n                    cropSize: cropSize\n                }, _this.recomputeCropPosition);\n                // pass crop size to parent\n                if (_this.props.setCropSize) {\n                    _this.props.setCropSize(cropSize);\n                }\n                return cropSize;\n            }\n        };\n        _this.onMouseDown = function(e) {\n            if (!_this.currentDoc) return;\n            e.preventDefault();\n            _this.currentDoc.addEventListener(\"mousemove\", _this.onMouseMove);\n            _this.currentDoc.addEventListener(\"mouseup\", _this.onDragStopped);\n            _this.onDragStart(Cropper.getMousePoint(e));\n        };\n        _this.onMouseMove = function(e) {\n            return _this.onDrag(Cropper.getMousePoint(e));\n        };\n        _this.onTouchStart = function(e) {\n            if (!_this.currentDoc) return;\n            _this.isTouching = true;\n            if (_this.props.onTouchRequest && !_this.props.onTouchRequest(e)) {\n                return;\n            }\n            _this.currentDoc.addEventListener(\"touchmove\", _this.onTouchMove, {\n                passive: false\n            }); // iOS 11 now defaults to passive: true\n            _this.currentDoc.addEventListener(\"touchend\", _this.onDragStopped);\n            if (e.touches.length === 2) {\n                _this.onPinchStart(e);\n            } else if (e.touches.length === 1) {\n                _this.onDragStart(Cropper.getTouchPoint(e.touches[0]));\n            }\n        };\n        _this.onTouchMove = function(e) {\n            // Prevent whole page from scrolling on iOS.\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                _this.onPinchMove(e);\n            } else if (e.touches.length === 1) {\n                _this.onDrag(Cropper.getTouchPoint(e.touches[0]));\n            }\n        };\n        _this.onGestureStart = function(e) {\n            if (!_this.currentDoc) return;\n            e.preventDefault();\n            _this.currentDoc.addEventListener(\"gesturechange\", _this.onGestureMove);\n            _this.currentDoc.addEventListener(\"gestureend\", _this.onGestureEnd);\n            _this.gestureZoomStart = _this.props.zoom;\n            _this.gestureRotationStart = _this.props.rotation;\n        };\n        _this.onGestureMove = function(e) {\n            e.preventDefault();\n            if (_this.isTouching) {\n                // this is to avoid conflict between gesture and touch events\n                return;\n            }\n            var point = Cropper.getMousePoint(e);\n            var newZoom = _this.gestureZoomStart - 1 + e.scale;\n            _this.setNewZoom(newZoom, point, {\n                shouldUpdatePosition: true\n            });\n            if (_this.props.onRotationChange) {\n                var newRotation = _this.gestureRotationStart + e.rotation;\n                _this.props.onRotationChange(newRotation);\n            }\n        };\n        _this.onGestureEnd = function(e) {\n            _this.cleanEvents();\n        };\n        _this.onDragStart = function(_a) {\n            var _b, _c;\n            var x = _a.x, y = _a.y;\n            _this.dragStartPosition = {\n                x: x,\n                y: y\n            };\n            _this.dragStartCrop = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.props.crop);\n            (_c = (_b = _this.props).onInteractionStart) === null || _c === void 0 ? void 0 : _c.call(_b);\n        };\n        _this.onDrag = function(_a) {\n            var x = _a.x, y = _a.y;\n            if (!_this.currentWindow) return;\n            if (_this.rafDragTimeout) _this.currentWindow.cancelAnimationFrame(_this.rafDragTimeout);\n            _this.rafDragTimeout = _this.currentWindow.requestAnimationFrame(function() {\n                if (!_this.state.cropSize) return;\n                if (x === undefined || y === undefined) return;\n                var offsetX = x - _this.dragStartPosition.x;\n                var offsetY = y - _this.dragStartPosition.y;\n                var requestedPosition = {\n                    x: _this.dragStartCrop.x + offsetX,\n                    y: _this.dragStartCrop.y + offsetY\n                };\n                var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : requestedPosition;\n                _this.props.onCropChange(newPosition);\n            });\n        };\n        _this.onDragStopped = function() {\n            var _a, _b;\n            _this.isTouching = false;\n            _this.cleanEvents();\n            _this.emitCropData();\n            (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        };\n        _this.onWheel = function(e) {\n            if (!_this.currentWindow) return;\n            if (_this.props.onWheelRequest && !_this.props.onWheelRequest(e)) {\n                return;\n            }\n            e.preventDefault();\n            var point = Cropper.getMousePoint(e);\n            var pixelY = normalize_wheel__WEBPACK_IMPORTED_MODULE_1___default()(e).pixelY;\n            var newZoom = _this.props.zoom - pixelY * _this.props.zoomSpeed / 200;\n            _this.setNewZoom(newZoom, point, {\n                shouldUpdatePosition: true\n            });\n            if (!_this.state.hasWheelJustStarted) {\n                _this.setState({\n                    hasWheelJustStarted: true\n                }, function() {\n                    var _a, _b;\n                    return (_b = (_a = _this.props).onInteractionStart) === null || _b === void 0 ? void 0 : _b.call(_a);\n                });\n            }\n            if (_this.wheelTimer) {\n                clearTimeout(_this.wheelTimer);\n            }\n            _this.wheelTimer = _this.currentWindow.setTimeout(function() {\n                return _this.setState({\n                    hasWheelJustStarted: false\n                }, function() {\n                    var _a, _b;\n                    return (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n                });\n            }, 250);\n        };\n        _this.getPointOnContainer = function(_a) {\n            var x = _a.x, y = _a.y;\n            if (!_this.containerRect) {\n                throw new Error(\"The Cropper is not mounted\");\n            }\n            return {\n                x: _this.containerRect.width / 2 - (x - _this.containerRect.left),\n                y: _this.containerRect.height / 2 - (y - _this.containerRect.top)\n            };\n        };\n        _this.getPointOnMedia = function(_a) {\n            var x = _a.x, y = _a.y;\n            var _b = _this.props, crop = _b.crop, zoom = _b.zoom;\n            return {\n                x: (x + crop.x) / zoom,\n                y: (y + crop.y) / zoom\n            };\n        };\n        _this.setNewZoom = function(zoom, point, _a) {\n            var _b = _a === void 0 ? {} : _a, _c = _b.shouldUpdatePosition, shouldUpdatePosition = _c === void 0 ? true : _c;\n            if (!_this.state.cropSize || !_this.props.onZoomChange) return;\n            var newZoom = clamp(zoom, _this.props.minZoom, _this.props.maxZoom);\n            if (shouldUpdatePosition) {\n                var zoomPoint = _this.getPointOnContainer(point);\n                var zoomTarget = _this.getPointOnMedia(zoomPoint);\n                var requestedPosition = {\n                    x: zoomTarget.x * newZoom - zoomPoint.x,\n                    y: zoomTarget.y * newZoom - zoomPoint.y\n                };\n                var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, newZoom, _this.props.rotation) : requestedPosition;\n                _this.props.onCropChange(newPosition);\n            }\n            _this.props.onZoomChange(newZoom);\n        };\n        _this.getCropData = function() {\n            if (!_this.state.cropSize) {\n                return null;\n            }\n            // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ValentinH/react-easy-crop/issues/6)\n            var restrictedPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n            return computeCroppedArea(restrictedPosition, _this.mediaSize, _this.state.cropSize, _this.getAspect(), _this.props.zoom, _this.props.rotation, _this.props.restrictPosition);\n        };\n        _this.emitCropData = function() {\n            var cropData = _this.getCropData();\n            if (!cropData) return;\n            var croppedAreaPercentages = cropData.croppedAreaPercentages, croppedAreaPixels = cropData.croppedAreaPixels;\n            if (_this.props.onCropComplete) {\n                _this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels);\n            }\n            if (_this.props.onCropAreaChange) {\n                _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n            }\n        };\n        _this.emitCropAreaChange = function() {\n            var cropData = _this.getCropData();\n            if (!cropData) return;\n            var croppedAreaPercentages = cropData.croppedAreaPercentages, croppedAreaPixels = cropData.croppedAreaPixels;\n            if (_this.props.onCropAreaChange) {\n                _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n            }\n        };\n        _this.recomputeCropPosition = function() {\n            if (!_this.state.cropSize) return;\n            var newPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n            _this.props.onCropChange(newPosition);\n            _this.emitCropData();\n        };\n        return _this;\n    }\n    Cropper.prototype.componentDidMount = function() {\n        if (!this.currentDoc || !this.currentWindow) return;\n        if (this.containerRef) {\n            if (this.containerRef.ownerDocument) {\n                this.currentDoc = this.containerRef.ownerDocument;\n            }\n            if (this.currentDoc.defaultView) {\n                this.currentWindow = this.currentDoc.defaultView;\n            }\n            this.initResizeObserver();\n            // only add window resize listener if ResizeObserver is not supported. Otherwise, it would be redundant\n            if (typeof window.ResizeObserver === \"undefined\") {\n                this.currentWindow.addEventListener(\"resize\", this.computeSizes);\n            }\n            this.props.zoomWithScroll && this.containerRef.addEventListener(\"wheel\", this.onWheel, {\n                passive: false\n            });\n            this.containerRef.addEventListener(\"gesturestart\", this.onGestureStart);\n        }\n        if (!this.props.disableAutomaticStylesInjection) {\n            this.styleRef = this.currentDoc.createElement(\"style\");\n            this.styleRef.setAttribute(\"type\", \"text/css\");\n            if (this.props.nonce) {\n                this.styleRef.setAttribute(\"nonce\", this.props.nonce);\n            }\n            this.styleRef.innerHTML = css_248z;\n            this.currentDoc.head.appendChild(this.styleRef);\n        }\n        // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n        if (this.imageRef.current && this.imageRef.current.complete) {\n            this.onMediaLoad();\n        }\n        // set image and video refs in the parent if the callbacks exist\n        if (this.props.setImageRef) {\n            this.props.setImageRef(this.imageRef);\n        }\n        if (this.props.setVideoRef) {\n            this.props.setVideoRef(this.videoRef);\n        }\n    };\n    Cropper.prototype.componentWillUnmount = function() {\n        var _a, _b;\n        if (!this.currentDoc || !this.currentWindow) return;\n        if (typeof window.ResizeObserver === \"undefined\") {\n            this.currentWindow.removeEventListener(\"resize\", this.computeSizes);\n        }\n        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        if (this.containerRef) {\n            this.containerRef.removeEventListener(\"gesturestart\", this.preventZoomSafari);\n        }\n        if (this.styleRef) {\n            (_b = this.styleRef.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(this.styleRef);\n        }\n        this.cleanEvents();\n        this.props.zoomWithScroll && this.clearScrollEvent();\n    };\n    Cropper.prototype.componentDidUpdate = function(prevProps) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (prevProps.rotation !== this.props.rotation) {\n            this.computeSizes();\n            this.recomputeCropPosition();\n        } else if (prevProps.aspect !== this.props.aspect) {\n            this.computeSizes();\n        } else if (prevProps.zoom !== this.props.zoom) {\n            this.recomputeCropPosition();\n        } else if (((_a = prevProps.cropSize) === null || _a === void 0 ? void 0 : _a.height) !== ((_b = this.props.cropSize) === null || _b === void 0 ? void 0 : _b.height) || ((_c = prevProps.cropSize) === null || _c === void 0 ? void 0 : _c.width) !== ((_d = this.props.cropSize) === null || _d === void 0 ? void 0 : _d.width)) {\n            this.computeSizes();\n        } else if (((_e = prevProps.crop) === null || _e === void 0 ? void 0 : _e.x) !== ((_f = this.props.crop) === null || _f === void 0 ? void 0 : _f.x) || ((_g = prevProps.crop) === null || _g === void 0 ? void 0 : _g.y) !== ((_h = this.props.crop) === null || _h === void 0 ? void 0 : _h.y)) {\n            this.emitCropAreaChange();\n        }\n        if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n            this.props.zoomWithScroll ? this.containerRef.addEventListener(\"wheel\", this.onWheel, {\n                passive: false\n            }) : this.clearScrollEvent();\n        }\n        if (prevProps.video !== this.props.video) {\n            (_j = this.videoRef.current) === null || _j === void 0 ? void 0 : _j.load();\n        }\n    };\n    Cropper.prototype.getAspect = function() {\n        var _a = this.props, cropSize = _a.cropSize, aspect = _a.aspect;\n        if (cropSize) {\n            return cropSize.width / cropSize.height;\n        }\n        return aspect;\n    };\n    Cropper.prototype.onPinchStart = function(e) {\n        var pointA = Cropper.getTouchPoint(e.touches[0]);\n        var pointB = Cropper.getTouchPoint(e.touches[1]);\n        this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB);\n        this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB);\n        this.onDragStart(getCenter(pointA, pointB));\n    };\n    Cropper.prototype.onPinchMove = function(e) {\n        var _this = this;\n        if (!this.currentDoc || !this.currentWindow) return;\n        var pointA = Cropper.getTouchPoint(e.touches[0]);\n        var pointB = Cropper.getTouchPoint(e.touches[1]);\n        var center = getCenter(pointA, pointB);\n        this.onDrag(center);\n        if (this.rafPinchTimeout) this.currentWindow.cancelAnimationFrame(this.rafPinchTimeout);\n        this.rafPinchTimeout = this.currentWindow.requestAnimationFrame(function() {\n            var distance = getDistanceBetweenPoints(pointA, pointB);\n            var newZoom = _this.props.zoom * (distance / _this.lastPinchDistance);\n            _this.setNewZoom(newZoom, center, {\n                shouldUpdatePosition: false\n            });\n            _this.lastPinchDistance = distance;\n            var rotation = getRotationBetweenPoints(pointA, pointB);\n            var newRotation = _this.props.rotation + (rotation - _this.lastPinchRotation);\n            _this.props.onRotationChange && _this.props.onRotationChange(newRotation);\n            _this.lastPinchRotation = rotation;\n        });\n    };\n    Cropper.prototype.render = function() {\n        var _this = this;\n        var _a = this.props, image = _a.image, video = _a.video, mediaProps = _a.mediaProps, transform = _a.transform, _b = _a.crop, x = _b.x, y = _b.y, rotation = _a.rotation, zoom = _a.zoom, cropShape = _a.cropShape, showGrid = _a.showGrid, _c = _a.style, containerStyle = _c.containerStyle, cropAreaStyle = _c.cropAreaStyle, mediaStyle = _c.mediaStyle, _d = _a.classes, containerClassName = _d.containerClassName, cropAreaClassName = _d.cropAreaClassName, mediaClassName = _d.mediaClassName, objectFit = _a.objectFit;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            onMouseDown: this.onMouseDown,\n            onTouchStart: this.onTouchStart,\n            ref: function ref(el) {\n                return _this.containerRef = el;\n            },\n            \"data-testid\": \"container\",\n            style: containerStyle,\n            className: classNames(\"reactEasyCrop_Container\", containerClassName)\n        }, image ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            alt: \"\",\n            className: classNames(\"reactEasyCrop_Image\", objectFit === \"contain\" && \"reactEasyCrop_Contain\", objectFit === \"horizontal-cover\" && \"reactEasyCrop_Cover_Horizontal\", objectFit === \"vertical-cover\" && \"reactEasyCrop_Cover_Vertical\", objectFit === \"auto-cover\" && (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight ? \"reactEasyCrop_Cover_Horizontal\" : \"reactEasyCrop_Cover_Vertical\"), mediaClassName)\n        }, mediaProps, {\n            src: image,\n            ref: this.imageRef,\n            style: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, mediaStyle), {\n                transform: transform || \"translate(\".concat(x, \"px, \").concat(y, \"px) rotate(\").concat(rotation, \"deg) scale(\").concat(zoom, \")\")\n            }),\n            onLoad: this.onMediaLoad\n        })) : video && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"video\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            autoPlay: true,\n            loop: true,\n            muted: true,\n            className: classNames(\"reactEasyCrop_Video\", objectFit === \"contain\" && \"reactEasyCrop_Contain\", objectFit === \"horizontal-cover\" && \"reactEasyCrop_Cover_Horizontal\", objectFit === \"vertical-cover\" && \"reactEasyCrop_Cover_Vertical\", objectFit === \"auto-cover\" && (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight ? \"reactEasyCrop_Cover_Horizontal\" : \"reactEasyCrop_Cover_Vertical\"), mediaClassName)\n        }, mediaProps, {\n            ref: this.videoRef,\n            onLoadedMetadata: this.onMediaLoad,\n            style: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, mediaStyle), {\n                transform: transform || \"translate(\".concat(x, \"px, \").concat(y, \"px) rotate(\").concat(rotation, \"deg) scale(\").concat(zoom, \")\")\n            }),\n            controls: false\n        }), (Array.isArray(video) ? video : [\n            {\n                src: video\n            }\n        ]).map(function(item) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"source\", (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                key: item.src\n            }, item));\n        })), this.state.cropSize && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, cropAreaStyle), {\n                width: this.state.cropSize.width,\n                height: this.state.cropSize.height\n            }),\n            \"data-testid\": \"cropper\",\n            className: classNames(\"reactEasyCrop_CropArea\", cropShape === \"round\" && \"reactEasyCrop_CropAreaRound\", showGrid && \"reactEasyCrop_CropAreaGrid\", cropAreaClassName)\n        }));\n    };\n    Cropper.defaultProps = {\n        zoom: 1,\n        rotation: 0,\n        aspect: 4 / 3,\n        maxZoom: MAX_ZOOM,\n        minZoom: MIN_ZOOM,\n        cropShape: \"rect\",\n        objectFit: \"contain\",\n        showGrid: true,\n        style: {},\n        classes: {},\n        mediaProps: {},\n        zoomSpeed: 1,\n        restrictPosition: true,\n        zoomWithScroll: true\n    };\n    Cropper.getMousePoint = function(e) {\n        return {\n            x: Number(e.clientX),\n            y: Number(e.clientY)\n        };\n    };\n    Cropper.getTouchPoint = function(touch) {\n        return {\n            x: Number(touch.clientX),\n            y: Number(touch.clientY)\n        };\n    };\n    return Cropper;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n //# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-easy-crop/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-easy-crop/node_modules/tslib/tslib.es6.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-easy-crop/node_modules/tslib/tslib.es6.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZWFzeS1jcm9wL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs4RUFhOEUsR0FDOUUsMkJBQTJCLEdBRTNCLElBQUlBLGdCQUFnQixTQUFTQyxDQUFDLEVBQUVDLENBQUM7SUFDN0JGLGdCQUFnQkcsT0FBT0MsY0FBYyxJQUNoQztRQUFFQyxXQUFXLEVBQUU7SUFBQyxjQUFhQyxTQUFTLFNBQVVMLENBQUMsRUFBRUMsQ0FBQztRQUFJRCxFQUFFSSxTQUFTLEdBQUdIO0lBQUcsS0FDMUUsU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1FBQUksSUFBSyxJQUFJSyxLQUFLTCxFQUFHLElBQUlDLE9BQU9LLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQUlOLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7SUFBRTtJQUNwRyxPQUFPUCxjQUFjQyxHQUFHQztBQUM1QjtBQUVPLFNBQVNTLFVBQVVWLENBQUMsRUFBRUMsQ0FBQztJQUMxQkYsY0FBY0MsR0FBR0M7SUFDakIsU0FBU1U7UUFBTyxJQUFJLENBQUNDLFdBQVcsR0FBR1o7SUFBRztJQUN0Q0EsRUFBRU8sU0FBUyxHQUFHTixNQUFNLE9BQU9DLE9BQU9XLE1BQU0sQ0FBQ1osS0FBTVUsQ0FBQUEsR0FBR0osU0FBUyxHQUFHTixFQUFFTSxTQUFTLEVBQUUsSUFBSUksSUFBRztBQUN0RjtBQUVPLElBQUlHLFdBQVc7SUFDbEJBLFdBQVdaLE9BQU9hLE1BQU0sSUFBSSxTQUFTRCxTQUFTRSxDQUFDO1FBQzNDLElBQUssSUFBSUMsR0FBR0MsSUFBSSxHQUFHQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVILElBQUlDLEdBQUdELElBQUs7WUFDakRELElBQUlHLFNBQVMsQ0FBQ0YsRUFBRTtZQUNoQixJQUFLLElBQUlaLEtB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LFFBQVEsRUFBRUMsVUFBVSxFQUFFdEUsS0FBSztJQUM5RCxJQUFJLENBQUNzRSxXQUFXQyxHQUFHLENBQUNGLFdBQVc7UUFDM0IsTUFBTSxJQUFJM0MsVUFBVTtJQUN4QjtJQUNBNEMsV0FBV0csR0FBRyxDQUFDSixVQUFVckU7SUFDekIsT0FBT0E7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL21lZGNvZGVzX2FwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1lYXN5LWNyb3Avbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcz9lZDVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsIl9fcmVzdCIsImUiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsImYiLCJ5IiwiZyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJfX2NyZWF0ZUJpbmRpbmciLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImVudW1lcmFibGUiLCJnZXQiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZCIsImNvbmNhdCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJhIiwiaiIsImpsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsInJlc3VtZSIsInNldHRsZSIsImZ1bGZpbGwiLCJzaGlmdCIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJjb29rZWQiLCJyYXciLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwiX19pbXBvcnREZWZhdWx0IiwiZGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsInByaXZhdGVNYXAiLCJoYXMiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-easy-crop/node_modules/tslib/tslib.es6.js\n");

/***/ })

};
;